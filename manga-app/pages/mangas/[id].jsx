import Image from 'next/image'
import Head from 'next/head'
import {
  AiFillStar,
  AiOutlineArrowLeft,
  AiOutlineArrowRight,
} from 'react-icons/ai'
import React from 'react'

function Animes({ manga, characters }) {
  const rowRef = React.useRef(null)
  const [isMoved, setIsMoved] = React.useState(false)

  const handleClick = (direction) => {
    setIsMoved(true)
    if (rowRef.current) {
      const { scrollLeft, clientWidth } = rowRef.current

      const scrollTo =
        direction === 'left'
          ? scrollLeft - clientWidth
          : scrollLeft + clientWidth
      rowRef.current.scrollTo({ left: scrollTo, behavior: 'smooth' })
    }
  }
  return (
    <div
      className="relative w-full bg-cover bg-center bg-no-repeat"
      style={{
        backgroundImage: `url(
          ${manga.data.images.jpg.large_image_url}
        )`,
      }}
    >
      <Head>
        <title>Mangas | {manga.data.title_japanese}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className="w-full px-4 ">
        <div>
          <div className="relative z-[100] mb-10 max-w-[500px] py-10 md:mb-0">
            <span className="font-semibold text-pink-400">
              {manga.data.title_japanese}
            </span>
            <h2 className="my-3 text-3xl font-bold">{manga.data.title}</h2>
            <div className=" item-center my-2 flex gap-2">
              <span>
                <AiFillStar size={20} color="#ffd700" />
              </span>
              {manga.data.score} %
            </div>
            <p className="mb-1 font-semibold">{manga.data.synopsis}</p>
          </div>

          <div>
            <div className="absolute top-0 left-0 right-0 bottom-0 z-[1]  bg-black/75" />
          </div>
        </div>
      </div>
      <div className="relative z-10 px-10 py-2">
        <h2 className="mb-5 text-2xl font-semibold">Characters</h2>
        <div className="group relative flex items-center gap-x-5 overflow-x-scroll scrollbar-hide">
          <AiOutlineArrowLeft
            className={`absolute top-0 bottom-0 left-2 z-40 m-auto h-9 w-9 cursor-pointer opacity-0 transition hover:scale-125 group-hover:opacity-100 ${
              !isMoved && 'hidden'
            }`}
            onClick={() => handleClick('left')}
          />
          <div
            ref={rowRef}
            className="relative flex items-center gap-x-4 overflow-x-scroll scrollbar-hide"
          >
            {characters.data.map((item) => (
              <div
                key="item.data.character.mal_id"
                className="relative h-[260px] min-w-[200px] cursor-pointer bg-cover bg-center bg-no-repeat"
              >
                <Image
                  src={item.character?.images?.jpg.image_url}
                  alt="/"
                  className="rounded-xl"
                  width="200"
                  height="200"
                />
                <p className="font-semibold">{item.character.name}</p>
              </div>
            ))}
          </div>
          <AiOutlineArrowRight
            className="absolute top-0 bottom-0 right-2 z-40 m-auto h-9 w-9 cursor-pointer opacity-0 transition hover:scale-125 group-hover:opacity-100"
            onClick={() => handleClick('right')}
          />
        </div>
      </div>
    </div>
  )
}

export default Animes

export const getServerSidePaths = async () => {
  const res = await fetch('https://api.jikan.moe/v4/top/anime')
  const data = await res.json()

  const paths = data.data.map((mang) => ({
    params: {
      id: mang.mal_id.toString(),
    },
  }))
  return {
    paths,
    fallback: false,
  }
}

export const getServerSideProps = async (context) => {
  const { id } = context.params
  const res = await fetch(`https://api.jikan.moe/v4/manga/${id}`)
  const characterRes = await fetch(
    `https://api.jikan.moe/v4/manga/${id}/characters`
  )
  const data = await res.json()
  const characterData = await characterRes.json()

  return {
    props: {
      manga: data,
      characters: characterData,
    },
  }
}
